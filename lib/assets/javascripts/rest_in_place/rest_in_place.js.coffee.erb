var $, ESC_KEY, RestInPlaceEditor;

RestInPlaceEditor = (function() {

  function RestInPlaceEditor(e) {
    this.$element = $(e);
    this.initOptions();
    this.bindForm();
    this.createClickHandler();
    this.$element.click(this.clickHandler);
  }

  RestInPlaceEditor.prototype.activate = function() {
    this.oldValue = this.$element.html();
    this.$element.trigger('activate.rest-in-place');
    this.$element.addClass('rip-active');
    this.$element.unbind('click', this.clickHandler);
    this.activateForm();
    return this.$element.trigger('ready.rest-in-place');
  };

  RestInPlaceEditor.prototype.abort = function() {
    this.$element.trigger('abort.rest-in-place');
    return this.$element.html(this.oldValue).removeClass('rip-active').click(this.clickHandler);
  };

  RestInPlaceEditor.prototype.update = function() {
    var updateRequest,
      _this = this;
    this.$element.trigger('update.rest-in-place');
    updateRequest = this.ajax({
      type: "post",
      data: this.requestData()
    });
    updateRequest.done(function(data) {
      if (data) {
        return _this.loadSuccessCallback(data);
      } else {
        return _this.loadViaGET();
      }
    });
    updateRequest.fail(function(jqXHR, textStatus) {
      if (jqXHR.status === 200 && textStatus === "parsererror") {
        return _this.loadViaGET();
      } else {
        _this.$element.trigger('failure.rest-in-place');
        return _this.abort();
      }
    });
    return this.$element.html("saving...");
  };

  RestInPlaceEditor.prototype.loadViaGET = function() {
    var showRequest,
      _this = this;
    showRequest = this.ajax();
    showRequest.done(function(data) {
      return _this.loadSuccessCallback(data);
    });
    return showRequest.fail(function() {
      return _this.$element.trigger('failure.rest-in-place');
    });
  };

  RestInPlaceEditor.prototype.activateForm = function() {
    return alert("The form was not properly initialized. activateForm is unbound");
  };

  RestInPlaceEditor.prototype.getValue = function() {
    return alert("The form was not properly initialized. getValue is unbound");
  };

  RestInPlaceEditor.prototype.initOptions = function() {
    var _this = this;
    this.$element.parents().each(function(index, parent) {
      _this.url = _this.url || $(parent).attr("data-url");
      _this.formType = _this.formType || $(parent).attr("data-formtype");
      _this.objectName = _this.objectName || $(parent).attr("data-object");
      return _this.attributeName = _this.attributeName || $(parent).attr("data-attribute");
    });
    this.$element.parents().each(function(index, parent) {
      var res;
      if (res = parent.id.match(/^(\w+)_(\d+)$/i)) {
        return _this.objectName = _this.objectName || res[1];
      }
    });
    this.url = this.$element.attr("data-url") || this.url || document.location.pathname;
    this.formType = this.$element.attr("data-formtype") || this.formType || "input";
    this.objectName = this.$element.attr("data-object") || this.objectName;
    return this.attributeName = this.$element.attr("data-attribute") || this.attributeName;
  };

  RestInPlaceEditor.prototype.bindForm = function() {
    this.activateForm = RestInPlaceEditor.forms[this.formType].activateForm;
    return this.getValue = RestInPlaceEditor.forms[this.formType].getValue;
  };

  RestInPlaceEditor.prototype.requestData = function() {
    var data;
    data = this.getEncodedTokenAuthenticationParams();
    data["_method"] = 'put';
    data["" + this.objectName + "[" + this.attributeName + "]"] = this.getValue();
    return data;
  };

  RestInPlaceEditor.prototype.getEncodedTokenAuthenticationParams = function() {
    var data, param, token;
    data = {};
    param = $('meta[name=csrf-param]').attr('content');
    token = $('meta[name=csrf-token]').attr('content');
    if (param && token) {
      data[param] = token;
    }
    return data;
  };

  RestInPlaceEditor.prototype.ajax = function(options) {
    if (options == null) {
      options = {};
    }
    options.url = this.url;
    options.dataType = "json";
    return $.ajax(options);
  };

  RestInPlaceEditor.prototype.extractAttributeFromData = function(data) {
    if (this.include_root_in_json) {
      return data[this.objectName][this.attributeName];
    } else {
      return data[this.attributeName];
    }
  };

  RestInPlaceEditor.prototype.loadSuccessCallback = function(data) {
    this.$element.text(this.extractAttributeFromData(data));
    this.$element.click(this.clickHandler);
    this.$element.removeClass('rip-active');
    return this.$element.trigger('success.rest-in-place', data);
  };

  RestInPlaceEditor.prototype.createClickHandler = function() {
    var _this = this;
    return this.clickHandler = function(event) {
      return _this.activate();
    };
  };

  return RestInPlaceEditor;

})();

RestInPlaceEditor.forms = {
  "input": {
    activateForm: function() {
      var value,
        _this = this;
      value = $.trim(this.$element.html());
      this.$element.html("<form action=\"javascript:void(0)\" style=\"display:inline;\">\n<input type=\"text\" class=\"rest-in-place-" + this.attributeName + "\">\n</form>");
      this.$element.find('input').val(value);
      this.$element.find('input')[0].select();
      this.$element.find("form").submit(function() {
        _this.update();
        return false;
      });
      this.$element.find("input").keyup(function(e) {
        if (e.keyCode === ESC_KEY) {
          return _this.abort();
        }
      });
      return this.$element.find("input").blur(function() {
        return _this.abort();
      });
    },
    getValue: function() {
      return this.$element.find("input").val();
    }
  },
  "textarea": {
    activateForm: function() {
      var value,
        _this = this;
      value = $.trim(this.$element.html());
      this.$element.html("<form action=\"javascript:void(0)\" style=\"display:inline;\">\n<textarea class=\"rest-in-place-" + this.attributeName + "\"></textarea>\n</form>");
      this.$element.find('textarea').val(value);
      this.$element.find('textarea')[0].select();
      this.$element.find("textarea").keyup(function(e) {
        if (e.keyCode === ESC_KEY) {
          return _this.abort();
        }
      });
      return this.$element.find("textarea").blur(function() {
        return _this.update();
      });
    },
    getValue: function() {
      return this.$element.find("textarea").val();
    }
  }
};

ESC_KEY = 27;

$ = jQuery;

RestInPlaceEditor.prototype.include_root_in_json = "<%= RestInPlace.include_root_in_json? %>" === "true";

window.RestInPlaceEditor = RestInPlaceEditor;

$.fn.restInPlace = function() {
  this.each(function() {
    return $(this).data('restInPlaceEditor', new RestInPlaceEditor(this));
  });
  return this;
};

$(function() {
  return $('.rest-in-place').restInPlace();
});
